// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

contract Inventory {
    // Mapping of inventory IDs to inventory details
    mapping (uint => InventoryDetails) public inventories;

    // Event emitted when a new inventory is created
    event NewInventory(uint inventoryId, uint itemId, uint quantity, address owner);

    // Struct to represent an inventory
    struct InventoryDetails {
        uint id;
        uint itemId;
        uint quantity;
        address owner;
    }

    // Function to create a new inventory
    function createInventory(uint _itemId, uint _quantity) public {
        require(_quantity > 0, "Quantity must be greater than zero");
        uint inventoryId = uint(keccak256(abi.encodePacked(_itemId, _quantity)));
        inventories[inventoryId] = InventoryDetails(inventoryId, _itemId, _quantity, msg.sender);
        emit NewInventory(inventoryId, _itemId, _quantity, msg.sender);
    }

    // Function to update inventory quantity
    function updateInventoryQuantity(uint _inventoryId, uint _quantity) public {
        require(_quantity > 0, "Quantity must be greater than zero");
        InventoryDetails storage inventory = inventories[_inventoryId];
        require(inventory.owner == msg.sender, "Only the owner can update the inventory");
        inventory.quantity = _quantity;
    }

    // Function to get inventory details by ID
    function getInventory(uint _inventoryId) public view returns (uint, uint, uint, address) {
        InventoryDetails storage inventory = inventories[_inventoryId];
        return (inventory.id, inventory.itemId, inventory.quantity, inventory.owner);
    }
}