// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

contract Shipment {
    // Mapping of shipment IDs to shipment details
    mapping (uint => ShipmentDetails) public shipments;

    // Event emitted when a new shipment is created
    event NewShipment(uint shipmentId, uint inventoryId, uint quantity, address sender, address recipient);

    // Struct to represent a shipment
    struct ShipmentDetails {
        uint id;
        uint inventoryId;
        uint quantity;
        address sender;
        address recipient;
    }

    // Function to create a new shipment
    function createShipment(uint _inventoryId, uint _quantity, address _recipient) public {
        require(_quantity > 0, "Quantity must be greater than zero");
        uint shipmentId = uint(keccak256(abi.encodePacked(_inventoryId, _quantity, _recipient)));
        shipments[shipmentId] = ShipmentDetails(shipmentId, _inventoryId, _quantity, msg.sender, _recipient);
        emit NewShipment(shipmentId, _inventoryId, _quantity, msg.sender, _recipient);
    }

    // Function to get shipment details by ID
    function getShipment(uint _shipmentId) public view returns (uint, uint, uint, address, address) {
        ShipmentDetails storage shipment = shipments[_shipmentId];
        return (shipment.id, shipment.inventoryId, shipment.quantity, shipment.sender, shipment.recipient);
    }
}